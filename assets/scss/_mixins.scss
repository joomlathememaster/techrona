// Sass CSS3 Mixins! The Cross-Browser CSS3 Sass Library
// By: Matthieu Aussaguel, http://www.mynameismatthieu.com, @matthieu_tweets
@mixin font-smoothing(){
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
}
// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin _assert-ascending($map, $map-name) {
    $prev-key: null;
    $prev-num: null;
    @each $key, $num in $map {
        @if $prev-num == null {
            // Do nothing
        } @else if not comparable($prev-num, $num) {
            @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
        } @else if $prev-num >= $num {
            @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
        }
        $prev-key: $key;
        $prev-num: $num;
    }
}

// Starts at zero
// Another grid mixin that ensures the min-width of the lowest breakpoint starts at 0.
@mixin _assert-starts-at-zero($map) {
    $values: map-values($map);
    $first-value: nth($values, 1);
    @if $first-value != 0 {
        @warn "First breakpoint in `$grid-breakpoints` must start at 0, but starts at #{$first-value}.";
    }
}
/* ADDS A BROWSER PREFIX TO THE PROPERTY */

@mixin css3-prefix($property, $value) {
    #{$property}: #{$value};
    -webkit-#{$property}: #{$value};
    -khtml-#{$property}: #{$value};
    -moz-#{$property}: #{$value};
    -ms-#{$property}: #{$value};
    -o-#{$property}: #{$value};
}

// BACKGROUND GRADIENT-(toOpposite, $start %startPosition(0%), $end %endPosition(100%))
// Ps: Up slide -> Opacity, Down slide -> Color.
@mixin background-gradient-top($startColor: #ffb400, $startPosition: 0%, $endColor: #f9a33a, $endPosition: 100%) {
    background-image: -webkit-gradient(linear, top bottom, from($startColor), to($endColor));
    background-image: -webkit-linear-gradient(top, $startColor $startPosition, $endColor $endPosition);
    background-image: -moz-linear-gradient(top, $startColor $startPosition, $endColor $endPosition);
    background-image: -ms-linear-gradient(top, $startColor $startPosition, $endColor $endPosition);
    background-image: -o-linear-gradient(top, $startColor $startPosition, $endColor $endPosition);
    background-image: linear-gradient(top, $startColor $startPosition, $endColor $endPosition);
    filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}');
}
@mixin background-gradient-bottom($startColor: #ffb400, $startPosition: 0%, $endColor: #f9a33a, $endPosition: 100%) {
    background-image: -webkit-gradient(linear, bottom top, from($startColor), to($endColor));
    background-image: -webkit-linear-gradient(bottom, $startColor $startPosition, $endColor $endPosition);
    background-image: -moz-linear-gradient(bottom, $startColor $startPosition, $endColor $endPosition);
    background-image: -ms-linear-gradient(bottom, $startColor $startPosition, $endColor $endPosition);
    background-image: -o-linear-gradient(bottom, $startColor $startPosition, $endColor $endPosition);
    background-image: linear-gradient(bottom, $startColor $startPosition, $endColor $endPosition);
    filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}');
}
@mixin background-gradient-bottom3($startColor: #ffb400, $startPosition: 0%, $middleColor: #162542, $middlePosition: 50%, $endColor: #f9a33a, $endPosition: 100%) {
    background-image: -webkit-gradient(linear, bottom top, from($startColor), color-stop($middlePosition, $middleColor), to($endColor));
    background-image: -webkit-linear-gradient(bottom, $startColor $startPosition, $middleColor $middlePosition, $endColor $endPosition);
    background-image: -moz-linear-gradient(bottom, $startColor $startPosition, $middleColor $middlePosition, $endColor $endPosition);
    background-image: -ms-linear-gradient(bottom, $startColor $startPosition, $middleColor $middlePosition, $endColor $endPosition);
    background-image: -o-linear-gradient(bottom, $startColor $startPosition, $middleColor $middlePosition, $endColor $endPosition);
    background-image: linear-gradient(bottom, $startColor $startPosition, $middleColor $middlePosition, $endColor $endPosition);
    filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}');
}


// BACKGROUND GRADIENT
@mixin background-gradient($startColor: #3C3C3C, $endColor: #999999) {
    background-color: $startColor;
    background-image: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));
    background-image: -webkit-linear-gradient(top, $startColor, $endColor);
    background-image:    -moz-linear-gradient(top, $startColor, $endColor);
    background-image:     -ms-linear-gradient(top, $startColor, $endColor);
    background-image:      -o-linear-gradient(top, $startColor, $endColor);
    background-image:         linear-gradient(top, $startColor, $endColor);
    filter:            progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}');
}

// BACKGROUND GRADIENT
@mixin background-gradient_anm($startColor: #3C3C3C, $endColor: #999999, $anm: var(--x, 0)/ 200%) {
    background-color: $startColor;
    background: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor)) $anm;
    background: -webkit-linear-gradient(90deg, $startColor, $endColor, $startColor) $anm;
    background:    -moz-linear-gradient(90deg, $startColor, $endColor, $startColor) $anm;
    background:     -ms-linear-gradient(90deg, $startColor, $endColor, $startColor) $anm;
    background:      -o-linear-gradient(90deg, $startColor, $endColor, $startColor) $anm;
    background:         linear-gradient(90deg, $startColor, $endColor, $startColor) $anm;
    filter:            progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}',startColorStr='#{$startColor}' ) $anm;
}

// BACKGROUND HORIZONTAL
@mixin background-horizontal($startColor: #3C3C3C, $endColor: #999999) {
   
    background-image: -webkit-gradient(linear, left top, right top, from($startColor), to($endColor));
    background-image: -webkit-linear-gradient(left, $startColor, $endColor);
    background-image:    -moz-linear-gradient(left, $startColor, $endColor);
    background-image:     -ms-linear-gradient(left, $startColor, $endColor);
    background-image:      -o-linear-gradient(left, $startColor, $endColor);
    background-image:         linear-gradient(to right, $startColor, $endColor);
    filter:            progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}', gradientType='1');
    [dir="rtl"] &{
        background-image:         linear-gradient(to left, $startColor, $endColor);
    }
}

// BACKGROUND RADIAL
@mixin background-radial($startColor: #FFFFFF, $startPos: 0%, $endColor: #000000, $endPos:100%) {
    background: -moz-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos);
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop($startPos,$startColor), color-stop($endPos,$endColor));
    background: -webkit-radial-gradient(center, ellipse cover, $startColor $startPos,$endColor $endPos);
    background: -o-radial-gradient(center, ellipse cover, $startColor $startPos,$endColor $endPos);
    background: -ms-radial-gradient(center, ellipse cover, $startColor $startPos,$endColor $endPos);
    background: radial-gradient(ellipse at center, $startColor $startPos,$endColor $endPos);
}

// BACKGROUND SIZE
@mixin background-size($width: 100%, $height: $width) {
    @if type-of($width) == 'number' and $height != null {
        @include css3-prefix('background-size', $width $height);
    } @else {
        @include css3-prefix('background-size', $width);
    }
}

// BACKGROUND COLOR OPACITY
@mixin background-opacity($color: #000, $opacity: 0.85) {
    background: $color;
    background: rgba($color, $opacity);
}

// BORDER RADIUS
@mixin border-radius($radius: 5px) {
    @include css3-prefix('border-radius', $radius);
}

// HOVER SCALE IMAGE
@mixin scale-image() {
    opacity: .9;
    -webkit-transform: scale3d(1.05, 1.05, 1);
    transform: scale3d(1.05, 1.05, 1);
}

@mixin border-radius-separate($topLeftRadius: 5px, $topRightRadius: 5px, $bottomLeftRadius: 5px, $bottomRightRadius: 5px) {
    -webkit-border-top-left-radius:     $topLeftRadius;
    -webkit-border-top-right-radius:    $topRightRadius;
    -webkit-border-bottom-right-radius: $bottomRightRadius;
    -webkit-border-bottom-left-radius:  $bottomLeftRadius;

    -moz-border-radius-topleft:     $topLeftRadius;
    -moz-border-radius-topright:    $topRightRadius;
    -moz-border-radius-bottomright: $bottomRightRadius;
    -moz-border-radius-bottomleft:  $bottomLeftRadius;

    border-top-left-radius:     $topLeftRadius;
    border-top-right-radius:    $topRightRadius;
    border-bottom-right-radius: $bottomRightRadius;
    border-bottom-left-radius:  $bottomLeftRadius;
}

// BOX
@mixin box($orient: horizontal, $pack: center, $align: center) {
    display: -webkit-box;
    display: -moz-box;
    display: box;

    @include css3-prefix('box-orient', $orient);
    @include css3-prefix('box-pack', $pack);
    @include css3-prefix('box-align', $align);
}

// BOX RGBA
@mixin box-rgba($r: 60, $g: 3, $b: 12, $opacity: 0.23, $color: #3C3C3C) {
    background-color: transparent;
    background-color: rgba($r, $g, $b, $opacity);
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$color}',endColorstr='#{$color}');
    zoom:   1;
}


// BOX SHADOW
@mixin box-shadow($x) {
    @include css3-prefix('box-shadow', $x);
}
// BOX OUTLINE
@mixin box-outline($width: 1px, $color : $primary_color) {
    @include css3-prefix('box-shadow', 0 0 0 $width $color );
}
// BOX SIZING
@mixin box-sizing($type: border-box) {
    @include css3-prefix('box-sizing', $type);
}

// COLUMNS
@mixin columns($count: 3, $gap: 10) {
    @include css3-prefix('column-count', $count);
    @include css3-prefix('column-gap', $gap);
}

// DOUBLE BORDERS
@mixin double-borders($colorOne: #3C3C3C, $colorTwo: #999999, $radius: 0) {
    border: 1px solid $colorOne;

    @include css3-prefix('box-shadow', 0 0 0 1px $colorTwo);

    @include border-radius( $radius );
}

// FLEX
@mixin flex($value: 1) {
    @include css3-prefix('box-flex', $value);
}

// FLIP
@mixin flip($scaleX: -1) {
    @include css3-prefix('transform', scaleX($scaleX));
    filter:            FlipH;
    -ms-filter:        "FlipH";
}

// FONT FACE
@mixin font-face($fontFamily: myFont, $eotFileSrc: 'myFont.eot', $woffFileSrc: 'myFont.woff', $ttfFileSrc: 'myFont.ttf', $svgFileSrc: 'myFont.svg', $svgFontID: '#myFont') {
    font-family: $fontFamily;
    src: url($eotFileSrc)  format('eot'),
    url($woffFileSrc) format('woff'),
    url($ttfFileSrc)  format('truetype'),
    url($svgFileSrc + $svgFontID) format('svg');
}

// OPACITY
@mixin opacity($opacity: 0.5) {
    $opacityMultiplied: ($opacity * 100);

    filter:         alpha(opacity=$opacityMultiplied);
    -ms-filter:     "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $opacityMultiplied + ")";
    @include css3-prefix('opacity', $opacity);
}


// OUTLINE RADIUS
@mixin outline-radius($radius: 5px) {
    @include css3-prefix('outline-radius', $radius);
}

// RESIZE
@mixin resize($direction: both) {
    @include css3-prefix('resize', $direction);
}

// ROTATE
@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
    @include css3-prefix('transform', rotate($deg + deg));
    filter: progid:DXImageTransform.Microsoft.Matrix(
                    M11=#{$m11}, M12=#{$m12}, M21=#{$m21}, M22=#{$m22}, sizingMethod='auto expand');
    zoom: 1;
}

// TEXT SHADOW
@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4)) {
    text-shadow: $x $y $blur $color;
}

// TRANSFORM
@mixin transform($params) {
    @include css3-prefix('transform', $params);
}

// TRANSFORM STYLE
@mixin transform-style($style: preserve-3d) {
    @include css3-prefix('transform-style', $style);
}
// TRANSFORM ORIGIN
@mixin transform-origin($style: center) {
    @include css3-prefix('transform-origin', $style);
}
// TRANSITION
@mixin transition($properties...) {
    @if length($properties) >= 1 {
        @include css3-prefix('transition', $properties);
    }
    @else {
        @include css3-prefix('transition', 'all 300ms ease-in-out');
    }
}
@mixin animation-delay($number_item: 10, $time: 100ms){
    @for $i from 1 through $number_item {
        &:nth-child(#{$i}) {
            animation-delay: #{$i * $time};
        }
    }
}

// TRIPLE BORDERS
@mixin triple-borders($colorOne: #3C3C3C, $colorTwo: #999999, $colorThree: #000000, $radius: 0) {
    border: 1px solid $colorOne;

    @include border-radius($radius);

    @include css3-prefix('box-shadow', 0 0 0 1px $colorTwo, 0 0 0 2px $colorThree);
}

// KEYFRAMES
@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }
    @keyframes #{$animation-name} {
        @content;
    }
}

// ANIMATION
@mixin animation($str) {
    @include css3-prefix('animation', $str);
}


// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
    font-size: ($sizeValue * 16) * 1px;
    font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block() {
    display: block;
    margin-left: auto;
    margin-right: auto;
}
// Center Align
@mixin center-align($position:absolute) {
    display: block;
    position: $position;
    top: 50%;
    left: 50%; 
    @include transform(translate(-50%,-50%));
}

// Clearfix
/* @mixin clearfix() {
    content: "";
    display: table;
} */

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
    clear: both;
}

// Letter Spacing
@mixin letter-spacing($size, $space){
    @if $size != null and $space != null {
        letter-spacing: #{($size * $space) / 1000}px;
    }
}

/* Overlay Position */
@mixin overlay-pos($position: absolute, $space: 0){
    position: #{$position}!important;
    top: #{$space};
    right: #{$space};
    bottom: #{$space};
    left: #{$space};
}
/* image fit */
@mixin image-fit($variation : cover){
    height: 100%;
    width: 100%;
    object-fit: $variation;
    -o-object-fit: $variation;
    -moz-object-fit: $variation;
    -ms-filter-object-fit: $variation;
    -webkit-object-fit: $variation;
}
/* Image black and white */
@mixin image-bw($variation : grayscale(100%)){
    -webkit-filter: $variation ; /* Safari 6.0 - 9.0 */
    filter: $variation ;
    @include transition();
}
@mixin image-bw-hover($variation : none){
    -webkit-filter: $variation ; /* Safari 6.0 - 9.0 */
    filter: $variation ;
}
/* font_awesome 5.x */
@mixin fontawesome(){
    font-family: Font Awesome\ 5 Free;
    font-weight: 900;
}
 
/* MouseWheel */
@mixin kng-mousewheel($selected : '.kng-mousewheel', $scroll_bar_w : 34px){
    #{$selected} {
        overflow: hidden;
        height: 100%;
        max-height: 100vh;
        > *{
            overflow-x: hidden;
            overflow-y: scroll;
            width: calc( 100% + #{$scroll_bar_w});
            padding-right: #{$scroll_bar_w};
            height: 100%;
            max-height: 100vh;
            padding-bottom: 50px;
            select,
            table{
                width: calc(100% - #{$scroll_bar_w});
            }
            [dir='rtl'] &{
                padding-right: 0;
                padding-left: #{$scroll_bar_w};
            }
        }
    }
}
@include kng-mousewheel();

@mixin d-flex(){
    display: -webkit-box; 
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex; 
    display: flex;
    flex-wrap: wrap; 
}
@mixin d-flex-align-center(){
    display: -webkit-box; 
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex; 
    display: flex;
    flex-wrap: wrap; 
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
}
@mixin d-flex-justify-center(){
    display: -webkit-box; 
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex; 
    display: flex;
    flex-wrap: wrap; 
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    justify-content: center;
}
@mixin d-flex-align-justify-center(){
    display: -webkit-box; 
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex; 
    display: flex;
    flex-wrap: wrap; 
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    justify-content: center;
}
@mixin d-flex-nowrap(){
    display: -webkit-box; 
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex; 
    display: flex;
}
@mixin d-flex-auto(){
    display: -webkit-box; 
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    flex-wrap: wrap; 
    > * {
        flex: 0 0 auto;
        width: auto !important;
        max-width: 100%;
        display: flex;
        flex-wrap: wrap;
        align-items: center;
    }
}
@mixin flex-auto(){
    -ms-flex: 0 0 auto;
    flex: 0 0 auto;
    width: auto !important;
    max-width: 100%;
}
@mixin flex-basic(){
    -ms-flex-preferred-size: 0;
    flex-basis: 0;
    -ms-flex-positive: 1;
    flex-grow: 1;
    max-width: 100%;
}
@mixin d-flex-between(){
    display: -webkit-box; 
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
}

/**
 * Box 
*/
@mixin feature-box(){
    @include transition();
    .feature-box-content{
        background-color: #fff;
        box-shadow: 20px 20px 20px rgba(0, 0, 0, 0.03);
        -webkit-box-shadow: 20px 20px 20px rgba(0, 0, 0, 0.03);
        transition: all 0.3s ease-out 0s;
        padding: 70px 70px 55px;
        @media (max-width:$md_max){
            padding: 15px;
        }
    }
    &:hover{
        box-shadow: 0 20px 20px rgba(0,0,0,0.14);
        -webkit-box-shadow: 0 20px 20px rgba(0,0,0,0.14);
        transform: translateY(-10px);
    }
}

/**
 * Text Truncate multi line
*/
@mixin text-truncate-multi-line($font-size: 14px, $line-height: 1.7, $lines-to-show: 3 ){
    display: block; /* Fallback for non-webkit */
    display: -webkit-box;
    max-height: $font-size*$line-height*$lines-to-show; /* Fallback for non-webkit */
    font-size: $font-size;
    line-height: $line-height;
    overflow: hidden;
    text-overflow: ellipsis;
    @include css3-prefix('line-clamp',$lines-to-show);
    @include css3-prefix('box-orient', 'vertical');
    > * {
        display: block; /* Fallback for non-webkit */
        display: -webkit-box;
        max-height: $font-size*$line-height*$lines-to-show; /* Fallback for non-webkit */
        font-size: $font-size;
        line-height: $line-height;
        overflow: hidden;
        text-overflow: ellipsis;
        @include css3-prefix('line-clamp',$lines-to-show);
        @include css3-prefix('box-orient', 'vertical');
    }
}

@mixin text-multi-line($font-size: 14px, $line-height: 1.7, $lines-to-show: 3 ){
    font-size: $font-size;
    line-height: $line-height;
    //min-height: $font-size*$line-height*$lines-to-show; /* Fallback for non-webkit */
    max-height: $font-size*$line-height*$lines-to-show; /* Fallback for non-webkit */
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: $lines-to-show;
    -webkit-box-orient: vertical;
}

/**
 * Quote icon
*/
@mixin quote-icon($size: 30px, $weight: 900){
    font-family: $font_awesome;
    font-size: $size;
    font-weight: $weight;
    color: $primary_color;
    content: '\f10e';
    display: block;
}

@mixin wg-list-style(){
    border-bottom: $wg-list-border;
    padding: 0;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: space-between;
}

@mixin wg-list-arrow(){
    font-family: $FontTheClick;
    color: $primary_color;
    content: $wg-list-icon;
    padding-right: 15px;
    font-size: 12px;
    @include transform(translate(0,3px));
    [dir="rtl"] &{
        content: $wg-list-icon-rtl;
        padding-right: 0;
        padding-left: 15px;
    }
}
@mixin placeholder( $elem: 08121991 ) {
    @if ( $elem == 08121991 ) {
        &::-webkit-input-placeholder {
            @content;
        }
        &:-moz-placeholder {
            @content;
        }
        &::-moz-placeholder {
            @content;
        }
        &:-ms-input-placeholder {
            @content;
        }
    } @else {
        #{$elem}::-webkit-input-placeholder {
            @content;
        }
        #{$elem}:-moz-placeholder {
            @content;
        }
        #{$elem}::-moz-placeholder {
            @content;
        }
        #{$elem}:-ms-input-placeholder {
            @content;
        }
    }
}
 
/*----------------------------- Body Font Face-----------------------------*/
//-----------------------------------------------------------------------------//
@mixin body-default-font() {
    font-family: $quick_font;
}

/*----------------------------- Heading Font Face -----------------------------*/
//-----------------------------------------------------------------------------//
@mixin heading-default-font() {
    font-family: $quick_font;
    font-weight: bold;
}
 
@mixin clearfix() {
  &::after,
  &::before {
    display: block;
    clear: both;
    content: "";
  }
}
  
@mixin placeholder( $elem: 08121991 ) {
    @if ( $elem == 08121991 ) {
        &::-webkit-input-placeholder {
            @content;
        }
        &:-moz-placeholder {
            @content;
        }
        &::-moz-placeholder {
            @content;
        }
        &:-ms-input-placeholder {
            @content;
        }
    } @else {
        #{$elem}::-webkit-input-placeholder {
            @content;
        }
        #{$elem}:-moz-placeholder {
            @content;
        }
        #{$elem}::-moz-placeholder {
            @content;
        }
        #{$elem}:-ms-input-placeholder {
            @content;
        }
    }
}


// SCALE
@mixin scale($params) {
    @include transform(scale($params));
}
// font icon

@mixin font-kngi($icon, $size : ''){
    font-family: "techrona";
    content: $icon;
    @if $size !=''{
        font-size: $size;
    }
}

@include keyframes(headerSlideDown) {
    0%{ 
        margin-top:-150px;
    }
    100%{
        margin-top:0
    }
}

// Spin
@include keyframes(kng-spin) {
    0% {
      -webkit-transform: rotate(0deg);
              transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(359deg);
              transform: rotate(359deg);
    }
}

@keyframes animationFramesOne{
    0% {
        transform: translateX(0px);
    }
    25% {
        transform: translateX(-40px);
    }
    50% {
        transform: translateX(0px);
    }
    75% {
        transform: translateX(40px);
    }
    100% {
        transform: translateX(0px);
    }
}

@keyframes animationFramesTwo{
    0% {
        transform: translateX(0px);
    }
    25% {
        transform: translateX(40px);
    }
    50% {
        transform: translateX(0px);
    }
    75% {
        transform: translateX(-40px);
    }
    100% {
        transform: translateX(0px);
    }
}

@keyframes animationFramesThree {
    0%{
        transform:translate(0px,0px)
    }
    20%{
        transform:translate(40px,-5px)
    }
    40%{
        transform:translate(60px,40px)
    }
    60%{
        transform:translate(40px,60px)
    }
    80%{
        transform:translate(-40px,60px)
    }
    100%{
        transform:translate(0px,0px)
    }
}

@keyframes animationFramesFour {
    0%{
        transform:translate(0px,0px)
    }
    20%{
        transform:translate(-30px,40px)
    }
    40%{
        transform:translate(60px,60px)
    }
    60%{
        transform:translate(80px,40px)
    }
    80%{
        transform:translate(40px,-70px)
    }
    100%{
        transform:translate(0px,0px)
    }
}

@keyframes animationFramesFive{
    0% {
        transform: translateY(0px);
    }
    25% {
        transform: translateY(-40px);
    }
    50% {
        transform: translateY(0px);
    }
    75% {
        transform: translateY(40px);
    }
    100% {
        transform: translateY(0px);
    }
}
 
@mixin kng-letter-spacing($tracking) {
    letter-spacing: ($tracking / 1000) * 1em;  
}

@keyframes sk-rotate {
    100% { 
        transform: rotate(360deg); 
        -webkit-transform: rotate(360deg)
    }
}

@keyframes sk-bounce {
  0%, 100% { 
    transform: scale(0.0);
    -webkit-transform: scale(0.0);
  } 50% { 
    transform: scale(1.0);
    -webkit-transform: scale(1.0);
  }
}

@-webkit-keyframes loadershake {
  0% {
    -webkit-transform: rotateY(5deg);
            transform: rotateY(5deg);
  }
  50% {
    -webkit-transform: rotateY(45deg);
            transform: rotateY(45deg);
  }
  100% {
    -webkit-transform: rotateY(5deg);
            transform: rotateY(5deg);
  }
}

@keyframes loadershake {
  0% {
    -webkit-transform: rotateY(5deg);
            transform: rotateY(5deg);
  }
  50% {
    -webkit-transform: rotateY(45deg);
            transform: rotateY(45deg);
  }
  100% {
    -webkit-transform: rotateY(5deg);
            transform: rotateY(5deg);
  }
}